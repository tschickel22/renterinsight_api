# frozen_string_literal: true
module Api
  module Crm
    class LeadConversionsController < ApplicationController
      before_action :set_lead

      # POST /api/crm/leads/:lead_id/convert
      def convert
        account_name =
          (@lead.respond_to?(:name) && @lead.name.present?) ? @lead.name :
          [@lead.try(:first_name), @lead.try(:last_name)].compact.join(' ').presence ||
          "Lead #{@lead.id}"

        account = Account.create!(
          name:     account_name,
          email:    @lead.try(:email),
          phone:    @lead.try(:phone),
          lead_id:  @lead.id,
          metadata: {}
        )

        # mark lead converted (no user_id used anywhere)
        updates = { converted_account_id: account.id }
        updates[:status] = 'converted' if @lead.respond_to?(:status)
        @lead.update!(updates)

        # log a status-change activity
        Activity.create!(
          lead_id:       @lead.id,
          activity_type: 'status_change',
          description:   "Converted to account ##{account.id} (#{account.name})",
          metadata:      {}
        )

        render json: { success: true, leadId: @lead.id, accountId: account.id }, status: :created
      rescue => e
        render json: { success: false, error: e.message }, status: :unprocessable_entity
      end

      private

      def set_lead
        @lead = Lead.find(params[:lead_id] || params[:id])
      end
    end
  end
end
