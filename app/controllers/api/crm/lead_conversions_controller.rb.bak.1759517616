# frozen_string_literal: true
module Api
  module Crm
    class LeadConversionsController < ApplicationController
      before_action :set_lead

      # POST /api/crm/leads/:lead_id/convert
      def convert
  # Idempotency: if already converted, just return the existing account id
  if .respond_to?(:converted_account_id) && .converted_account_id.present?
    return render json: { success: true, leadId: .id, accountId: .converted_account_id }, status: :ok
  end

  account_name =
    (.respond_to?(:name) && .name.present?) ? .name :
    [.try(:first_name), .try(:last_name)].compact.join(" ").presence ||
    "Lead #{.id}"

  cols = Account.column_names
  attrs = {}
  attrs[:name]  = account_name      if cols.include?("name")
  attrs[:email] = .try(:email) if cols.include?("email")
  attrs[:phone] = .try(:phone) if cols.include?("phone")
  attrs[:lead_id]  = .id       if cols.include?("lead_id")
  attrs[:metadata] = {}             if cols.include?("metadata")

  account = Account.create!(attrs)

  updates = { converted_account_id: account.id }
  updates[:status] = "converted" if .respond_to?(:status)
  .update!(updates)

  Activity.create!(
    lead_id:       .id,
    activity_type: "status_change",
    description:   "Converted to account ###{account.id} (#{account.try(:name) || account.id})",
    metadata:      {}
  )

  render json: { success: true, leadId: .id, accountId: account.id }, status: :created
rescue => e
  render json: { success: false, error: e.message }, status: :unprocessable_entity
ender json: { success: true, leadId: .id, accountId: .converted_account_id }, status: :ok and return
  end

        begin
          account_name =
            if @lead.respond_to?(:name) && @lead.name.present?
              @lead.name
            else
              [@lead.try(:first_name), @lead.try(:last_name)].compact.join(' ').presence || "Lead #{@lead.id}"
            end

          # Only set attributes that actually exist on accounts
          cols  = Account.column_names
          attrs = {}
          attrs[:name]  = account_name       if cols.include?('name')
          attrs[:email] = @lead.try(:email)  if cols.include?('email')
          attrs[:phone] = @lead.try(:phone)  if cols.include?('phone')

          account = Account.create!(attrs)

          updates = { converted_account_id: account.id }
          updates[:status] = 'converted' if @lead.respond_to?(:status)
          @lead.update!(updates)

          Activity.create!(
            lead_id:       @lead.id,
            activity_type: 'status_change',
            description:   "Converted to account ##{account.id} (#{account.try(:name) || account.id})",
            metadata:      {}
          )

          render json: { success: true, leadId: @lead.id, accountId: account.id }, status: :created
        rescue => e
          Rails.logger.error("[convert] #{e.class}: #{e.message}")
          render json: { success: false, error: e.message }, status: :unprocessable_entity
        end
      end

      private

      def set_lead
        @lead = Lead.find(params[:lead_id] || params[:id])
      end
    end
  end
end
